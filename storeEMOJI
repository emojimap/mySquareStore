<!DOCTYPE html> 
<html> 
<head>
 <script type="text/javascript" src="https://web.squarecdn.com/v1/square.js"></script>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no">
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" integrity="sha256-xxxxxx+xxxx+xxxxx=" crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js" integrity="sha256-xxxxxxxxx+xxxxxxxxxx+xxxxxxxx=" crossorigin=""></script>
<style>
 #ckbx:checked {  height: 30px;  width: 30px;} 
 #ckbx {  height: 30px;  width: 30px;} 
#promoDiv { width: 60%; text-align: center; margin-top: 20px; visibility:hidden; } 
html { scroll-behavior: smooth; } 
html, body { height: 100%; margin: 0; } 
body { font-family: Arial; font-size: 17px; padding: 8px; } 
* { box-sizing: border-box; } 
a:hover, a:visited, a:link, a:active { text-decoration: none; color:black; } 
h1 { text-align: center; font-family: 'Brush Script MT', cursive; } 
h3 { font-family: 'Brush Script MT', cursive; }
#emojiDiv { background-color: white; }
#locationDiv { height: 100%; background-color: white; visibility: hidden; }
#cardDiv { height: 1000px; background-color: white; visibility: hidden; }
.row { display: -ms-flexbox; /* IE10 */ display: flex; -ms-flex-wrap: wrap; /* IE10 */ flex-wrap: wrap; margin: 0 -16px; }
.col-25 { -ms-flex: 25%; /* IE10 */ flex: 25%; }
.col-50 { -ms-flex: 50%; /* IE10 */ flex: 50%; }
.col-75 { -ms-flex: 75%; /* IE10 */ flex: 75%; }
.col-25, .col-50, .col-75 { padding: 0 16px; } 
.container { background-color: #f2f2f2; padding: 5px 20px 15px 20px; border: 1px solid lightgrey; border-radius: 3px; } 
input[type=text] { width: 100%; margin-bottom: 20px; padding: 12px; border: 1px solid #ccc; border-radius: 3px; }
label { margin-bottom: 10px; display: block; } 
.icon-container { margin-bottom: 20px; padding: 7px 0; font-size: 24px; } 
.btn { background-color: DodgerBlue; color: white; padding: 12px; margin: 10px 0; border: none; width: 100%; border-radius: 3px; cursor: pointer; font-size: 17px; }
.btn:hover { background-color: #FF6; } 
hr { border: 1px solid lightgrey; }
span.price { float: right; color: grey; } 
@media (max-width: 800px) {
.row { flex-direction: column-reverse; } 
.col-25 { margin-bottom: 20px; } } 
#emojiSel { animation: pulse 2s linear infinite; } 
@-webkit-keyframes "pulse" { 
0% { -webkit-transform: scale(1); transform: scale(1); }
50% { -webkit-transform: scale(0.8); transform: scale(0.8); } 
100% { -webkit-transform: scale(1); transform: scale(1); } }
img:hover { animation: shake 0.5s; animation-iteration-count: infinite; } 
@keyframes shake { 0% { transform: translate(1px, 1px) rotate(0deg); } 
10% { transform: translate(-1px, -2px) rotate(-1deg); }
20% { transform: translate(-3px, 0px) rotate(1deg); }
30% { transform: translate(3px, 2px) rotate(0deg); }
40% { transform: translate(1px, -1px) rotate(1deg); } 
50% { transform: translate(-1px, 2px) rotate(-1deg); } 
60% { transform: translate(-3px, 1px) rotate(0deg); } 
70% { transform: translate(3px, 1px) rotate(-1deg); } 
80% { transform: translate(-1px, -1px) rotate(1deg); } 
90% { transform: translate(1px, 2px) rotate(0deg); }
100% { transform: translate(1px, -2px) rotate(-1deg); } }
.center { display: block; margin-left: auto; margin-right: auto; width: 50%; }
/* The container must be positioned relative: */
.custom-select { position: relative; font-family: Arial; }
.custom-select select { display: none; /*hide original SELECT element: */ } 
.select-selected { background-color: DodgerBlue; } 
/* Style the arrow inside the select element: */ 
.select-selected:after {
position: absolute; content: ""; top: 14px; right: 10px; width: 0; height: 0; border: 6px solid transparent; 
border-color: #fff transparent transparent transparent; } 
/* Point the arrow upwards when the select box is open (active): */
.select-selected.select-arrow-active:after { border-color: transparent transparent #fff transparent; top: 7px; }
/* style the items (options), including the selected item: */
.select-items div,.select-selected { 
color: #ffffff; padding: 8px 16px; border: 1px solid transparent;
border-color: transparent transparent rgba(0, 0, 0, 0.1) transparent; cursor: pointer; 
} /* Style items (options): */ 
.select-items { position: absolute; background-color: DodgerBlue; top: 100%; left: 0; right: 0; z-index: 99; }
/* Hide the items when the select box is closed: */ 
.select-hide { display: none; } 
.select-items div:hover, .same-as-selected { background-color: rgba(0, 0, 0, 0.1); }
</style>
</head>
<body> 
<h1>$1 for 30 Days!</h1> 
<div class="main center" id="emojiDiv">
<?
chdir('emojis'); 
$emojis = glob("*.png"); 
shuffle($emojis); 
foreach($emojis as $emoji) {
 echo "<a href='#locationDiv' id='" . $emoji . "' onclick='setEmoji(this.id);' ><img width=160 src='emojis/" . $emoji . "'></a>"; } 
 ?>
 <br><br><br><br>
 </div>
 <div class="main" id="locationDiv">
 <div id="map" style="width: 100%; height: 100%;"></div>
 </div>
 <div class="main" id="cardDiv">
 <p></p>
 <div class="row">
 <div class="col-75"> 
 <div class="container">
 <form action="verify" method="POST" id="payment-form"> <div class="row"> 
 <div class="col-50">
 <h3>Billing Address</h3> 
 <input type="text" id="fname" name="fname" placeholder="First Name" onblur="billInfo(this.name, this.value)">
 <input type="text" id="lname" name="lname" placeholder="Last Name" onblur="billInfo(this.name, this.value)"> 
 <input type="text" id="adr" name="address" placeholder="Address 1" onblur="billInfo(this.name, this.value)"> 
 <input type="text" id="adr2" name="address2" placeholder="Address 2" onblur="billInfo(this.name, this.value)"> 
 <input type="text" id="city" name="city" placeholder="City" onblur="billInfo(this.name, this.value)"> 
 <div class="custom-select" style="width:200px;">
 <select name="state" id="state" onblur="billInfo(this.name, this.value)">
 <option value="" selected="selected">Select a State</option>
 <option value="AL">Alabama</option> <option value="AK">Alaska</option> <option value="AZ">Arizona</option> <option value="AR">Arkansas</option> <option value="CA">California</option> <option value="CO">Colorado</option> <option value="CT">Connecticut</option> <option value="DE">Delaware</option> <option value="DC">District Of Columbia</option> <option value="FL">Florida</option> <option value="GA">Georgia</option> <option value="HI">Hawaii</option> <option value="ID">Idaho</option> <option value="IL">Illinois</option> <option value="IN">Indiana</option> <option value="IA">Iowa</option> <option value="KS">Kansas</option> <option value="KY">Kentucky</option> <option value="LA">Louisiana</option> <option value="ME">Maine</option> <option value="MD">Maryland</option> <option value="MA">Massachusetts</option> <option value="MI">Michigan</option> <option value="MN">Minnesota</option> <option value="MS">Mississippi</option> <option value="MO">Missouri</option> <option value="MT">Montana</option> <option value="NE">Nebraska</option> <option value="NV">Nevada</option> <option value="NH">New Hampshire</option> <option value="NJ">New Jersey</option> <option value="NM">New Mexico</option> <option value="NY">New York</option> <option value="NC">North Carolina</option> <option value="ND">North Dakota</option> <option value="OH">Ohio</option> <option value="OK">Oklahoma</option> <option value="OR">Oregon</option> <option value="PA">Pennsylvania</option> <option value="RI">Rhode Island</option> <option value="SC">South Carolina</option> <option value="SD">South Dakota</option> <option value="TN">Tennessee</option> <option value="TX">Texas</option> <option value="UT">Utah</option> <option value="VT">Vermont</option> <option value="VA">Virginia</option> <option value="WA">Washington</option> <option value="WV">West Virginia</option> <option value="WI">Wisconsin</option> <option value="WY">Wyoming</option>
 </select> 
 </div> 
 </div> 
 <div class="col-50">
 <h3>Card</h3>
 <div class="icon-container"> 
 <img src='acc.png'>
 </div> 
 <div class="row"> 
 <div class="col-50"> 
 <input type="hidden" id="emoji" name="emoji" value="" >
 <input type="hidden" id="lalo" name="lalo" value="" >
 <div style='visibility:hidden;'>
 <input type='submit' value='Submit' id='sbmt'  class="btn" /> 
 </div>
 <div id="card-container">
 </div> 
 <input type="hidden" id="sid" name="sid"> 
 <button id="card-button" type="button" class="btn">ðŸ˜˜ BUY!</button> 
 <div id="payment-status-container"></div> 
 </div>
 </div> </div> </div> </div> </div> 
 <div class="col-25">
 <div style="text-align: center;"> 
 <div id="promoDiv"> 
 <input type="text" id="promo" name="promo" onblur="prmo()" placeholder="Promo Code">
 </div>
 <br> 
 <img id="emojiSel" src='emojis/scarf.png' onclick="javascript:document.getElementById('promoDiv').style.visibility = 'visible';">
 <label for="ckbx">$5&nbsp;for&nbsp;6&nbsp;months?</label>
 <input type="checkbox" id="ckbx" name="ckbx">
 </form>
 </div> 
 </div>
 </div>
 </div> 
 <script>
 const map = L.map('map').setView([34.0, -117.5], 10); 
 const tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', 
 { maxZoom: 19, attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>' }).addTo(map);
 const popup = L.popup(); 
 function onMapClick(e) { document.getElementById('lalo').value = e.latlng.toString().slice(7,-1); popup .setLatLng(e.latlng) .setContent("<span style='font-size:64px;'><a href='#cardDiv' id='mapLnk' onclick='setCard();' >ðŸ‘‡</a></span>") .openOn(map); 
 } 
 map.on('click', onMapClick);
 function getLocation() { 
 if (navigator.geolocation) { navigator.geolocation.getCurrentPosition(showPosition, showError); }
 else { console.log("Geolocation is not supported by this browser."); } } 
 function showPosition(position) { map.setView(new L.LatLng(position.coords.latitude, position.coords.longitude), 14); var circle = L.circle([position.coords.latitude, position.coords.longitude], {color: 'yellow',fillColor: 'yellow',fillOpacity: 0.8,radius: 50}).addTo(map); } 
 function showError(error) { switch(error.code) { case error.PERMISSION_DENIED: console.log("User denied the request for Geolocation."); break; case error.POSITION_UNAVAILABLE: console.log("Location information is unavailable."); break; case error.TIMEOUT: console.log("The request to get user location timed out."); break; case error.UNKNOWN_ERROR: console.log("An unknown error occurred."); break; }} 
 function setEmoji(emo) { getLocation(); document.getElementById('locationDiv').style.visibility = 'visible'; document.getElementById('emoji').value = emo.slice(0,-4); document.getElementById('emojiSel').src = 'emojis/' + emo; } 
 function setCard() { document.getElementById('cardDiv').style.visibility = 'visible'; } var details = {}; details.amount = '1'; details.currencyCode = 'USD'; details.intent = 'CHARGE'; details.billingContact = {}; details.billingContact.addressLines = [' ', ' ']; details.billingContact.familyName = ''; details.billingContact.givenName = ''; details.billingContact.country = 'US'; details.billingContact.city = ''; function billInfo(nme, val) { if (nme == 'address') {details.billingContact.addressLines[0] = val;} if (nme == 'address2') {details.billingContact.addressLines[1] = val;} if (nme == 'fname') {details.billingContact.givenName = val;} if (nme == 'lname') {details.billingContact.familyName = val;} if (nme == 'city') {details.billingContact.city = val;} } const locationId = 'xxxxxxxxxxxxx'; async function initializeCard(payments) { const card = await payments.card(); await card.attach('#card-container'); return card; } async function createPayment(token, verificationToken) { const body = JSON.stringify({locationId,sourceId: token,verificationToken,idempotencyKey: window.crypto.randomUUID(),}); console.log(token); document.getElementById('sid').value = token; document.getElementById("payment-form").submit(); } async function tokenize(paymentMethod) { const tokenResult = await paymentMethod.tokenize(); if (tokenResult.status === 'OK') {return tokenResult.token; } else { let errorMessage = `Tokenization failed with status: ${tokenResult.status}`; if (tokenResult.errors) {errorMessage += ` and errors: ${JSON.stringify(tokenResult.errors)}`;} throw new Error(errorMessage); } } async function verifyBuyer(payments, token, deets) { const verificationResults = await payments.verifyBuyer(	token,	deets	); return verificationResults.token; } document.addEventListener('DOMContentLoaded', async function () { if (!window.Square) {throw new Error('Square.js failed to load properly');} let payments; let card; try {payments = window.Square.payments('xxxxxx-xxxxxxxxxxxxxxxxxxxxxx', locationId);	} catch {} try {card = await initializeCard(payments);	} catch (e) {console.error('Initializing Card failed', e);} async function handlePaymentMethodSubmission(card) { try { const token = await tokenize(card); const verificationToken = await verifyBuyer(payments, token, details); const paymentResults = await createPayment(token, verificationToken); console.log(paymentResults); } catch (e) {console.error(e.message);} } const cardButton = document.getElementById('card-button'); cardButton.addEventListener('click', async function (event) {	await handlePaymentMethodSubmission(card); crd = document.getElementById("card-button"); crd.disabled = true; crd.style.color = "#ccc";}); }); var x, i, j, l, ll, selElmnt, a, b, c; /* Look for any elements with the class "custom-select": */ x = document.getElementsByClassName("custom-select"); l = x.length; for (i = 0; i < l; i++) { selElmnt = x[i].getElementsByTagName("select")[0]; ll = selElmnt.length; /* For each element, create a new DIV that will act as the selected item: */ a = document.createElement("DIV"); a.setAttribute("class", "select-selected"); a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML; x[i].appendChild(a); /* For each element, create a new DIV that will contain the option list: */ b = document.createElement("DIV"); b.setAttribute("class", "select-items select-hide"); for (j = 1; j < ll; j++) { /* For each option in the original select element, create a new DIV that will act as an option item: */ c = document.createElement("DIV"); c.innerHTML = selElmnt.options[j].innerHTML; c.addEventListener("click", function(e) { /* When an item is clicked, update the original select box, and the selected item: */ var y, i, k, s, h, sl, yl; s = this.parentNode.parentNode.getElementsByTagName("select")[0]; sl = s.length; h = this.parentNode.previousSibling; for (i = 0; i < sl; i++) { if (s.options[i].innerHTML == this.innerHTML) { s.selectedIndex = i; h.innerHTML = this.innerHTML; y = this.parentNode.getElementsByClassName("same-as-selected"); yl = y.length; for (k = 0; k < yl; k++) { y[k].removeAttribute("class"); } this.setAttribute("class", "same-as-selected"); break; } } h.click(); }); b.appendChild(c); } x[i].appendChild(b); a.addEventListener("click", function(e) { /* When the select box is clicked, close any other select boxes, and open/close the current select box: */ e.stopPropagation(); closeAllSelect(this); this.nextSibling.classList.toggle("select-hide"); this.classList.toggle("select-arrow-active"); }); } function closeAllSelect(elmnt) { /* A function that will close all select boxes in the document, except the current select box: */ var x, y, i, xl, yl, arrNo = []; x = document.getElementsByClassName("select-items"); y = document.getElementsByClassName("select-selected"); xl = x.length; yl = y.length; for (i = 0; i < yl; i++) { if (elmnt == y[i]) { arrNo.push(i) } else { y[i].classList.remove("select-arrow-active"); } } for (i = 0; i < xl; i++) { if (arrNo.indexOf(i)) { x[i].classList.add("select-hide"); } } } 
 /* If the user clicks anywhere outside the select box, then close all select boxes: */ 
 document.addEventListener("click", closeAllSelect);
 function prmo() {
let x = document.getElementById("promo");
window.location.href = "http://windrose.farm/store/verify?promo=" + x.value;
} </script><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></body> </html>
